#!/usr/bin/env python3
import pdb
from algosdk import *
from pyteal import *

import os

# Account details
algod_token = os.getenv("ALGOD_TOKEN")
algod_address = os.getenv("ALGOD_ADDR")
headers = {"X-API-Key": algod_token}
sender = os.getenv("SENDER_ADDRESS")
sender_pk = os.getenv("SENDER_PRIVATE_KEY")

algod_client = v2client.algod.AlgodClient(algod_token, algod_address, headers)

try:
    algod_client.status()
except Exception as e:
    print("Algod Error: {}".format(e))

# Define our contract
def approval_program():
  return Return(Int(1))


def clear_program():
  return Return(Int(1))

def load_teal_approval_program():
    file = open("build/basic_tealish.teal", "r")
    return file.read()

# Compile our contract
approval_teal = compileTeal(approval_program(), Mode.Application, version=5)
clearstate_teal = compileTeal(approval_program(), Mode.Application, version=5)

# compile our teal to bytecode (its returned in bas64)
approval_b64 = algod_client.compile(load_teal_approval_program())["result"]
clearstate_b64 = algod_client.compile(clearstate_teal)["result"]

# decode the base64
approval_bytes = encoding.base64.b64decode(approval_b64)
clearstate_bytes = encoding.base64.b64decode(clearstate_b64)

# print generated teal from pyteal
print("Approval Program Teal: {}".format(approval_teal))
print("Clear Program Teal: {}".format(clearstate_teal))

# print generated base64
print("Approval Program Binary B64: {}".format(approval_b64))
print("Clear Program Binary B64: {}".format(clearstate_b64))

# print generated bytecode
print("Approval Program Bytecode: {}".format(approval_bytes))
print("Clear Program Bytecode: {}".format(clearstate_bytes))

# Deploy our contract
params = algod_client.suggested_params()
params.flat_fee = True
params.fee = 1_000
# params.first = params.last + 1000

# ApplicationCreateTxn(sender, sp, on_complete,
# approval_program, clear_program, global_schema, local_schema,
# app_args=None, accounts=None, foreign_apps=None,
# foreign_assets=None, note=None, lease=None,
# rekey_to=None, extra_pages=0, boxes=None)

txn = future.transaction.ApplicationCreateTxn(
    sender=sender,
    sp=params,
    on_complete=future.transaction.OnComplete.NoOpOC,
    approval_program=approval_bytes,
    clear_program=clearstate_bytes,
    global_schema=future.transaction.StateSchema(1, 0),
    local_schema=future.transaction.StateSchema(0, 0),
)

signed_txn = txn.sign(sender_pk)
txid = algod_client.send_transaction(signed_txn)

print("Transaction ID: {}".format(txid))

# # Get the app ID
app_id = algod_client.pending_transaction_info(txid)["application-index"]
print("Application ID: {}".format(app_id))

# Wait for confirmation
future.transaction.wait_for_confirmation(algod_client, txid)
#
# Get the app details
app_info = algod_client.application_info(app_id)
print("Application Info: {}".format(app_info))
#
# # Get the app global Boxes
app_global_state = algod_client.application_boxes(app_id)
print("Application Global State: {}".format(app_global_state))

# get the contract address
contract_address = logic.get_application_address(app_id)
# pdb.set_trace()

# fund the contract
print("Funding contract with 15 Algo")
params = algod_client.suggested_params()
txn = future.transaction.PaymentTxn(sender, params, contract_address, 15_000_000)
signed_txn = txn.sign(sender_pk)
txid = algod_client.send_transaction(signed_txn)
future.transaction.wait_for_confirmation(algod_client, txid)
print("Funded contract with 15 Algo -> {}".format(txid))

# call the app multiple times

for i in range(1, 12):
    params = algod_client.suggested_params()
    params.flat_fee = True
    params.fee = 1_000

# ApplicationCallTxn(sender, sp, index, on_complete, local_schema=None, global_schema=None,
# approval_program=None, clear_program=None, app_args=None,
# accounts=None, foreign_apps=None, foreign_assets=None,
# note=None, lease=None, rekey_to=None, extra_pages=0, boxes=None)
    txn = future.transaction.ApplicationCallTxn(
        sender=sender,
        sp=params,
        index=app_id,
        on_complete=future.transaction.OnComplete.NoOpOC,
    )
    signed_txn = txn.sign(sender_pk)
    txid = algod_client.send_transaction(signed_txn)
    print("Transaction ID: {}".format(txid))
    future.transaction.wait_for_confirmation(algod_client, txid)


# txn = future.transaction.ApplicationCallTxn(
#     sender=sender,
#     sp=params,
#     index=app_id,
#     on_complete=future.transaction.OnComplete.NoOpOC
# )
#
# signed_txn = txn.sign(sender_pk)
# txid = algod_client.send_transaction(signed_txn)
#
# print("Transaction ID: {}".format(txid))
#
# # Wait for wait_for_confirmation
# future.transaction.wait_for_confirmation(algod_client, txid)



# Delete the app
# txn = transaction.ApplicationDeleteTxn(
#     sender=account1,
#     sp=params,
#     index=app_id,
# )
#
# signed_txn = txn.sign(account1_sk)
# txid = algod_client.send_transaction(signed_txn)
# print("Transaction ID: {}".format(txid))
#
# # Wait for wait_for_confirmation
# wait_for_confirmation(algod_client, txid)
#
#
